Q1. Sort Array with Two Swapped Elements
To sort an array with two swapped elements in linear time, we need to find the two elements and swap them back.


public class SortSwappedElements {
    public static void sortArray(int[] arr) {
        int n = arr.length;
        int first = -1, second = -1;

        // Find the first out of order element
        for (int i = 0; i < n - 1; i++) {
            if (arr[i] > arr[i + 1]) {
                first = i;
                break;
            }
        }

        // Find the second out of order element
        for (int i = n - 1; i > 0; i--) {
            if (arr[i] < arr[i - 1]) {
                second = i;
                break;
            }
        }

        // Swap the two elements
        if (first != -1 && second != -1) {
            int temp = arr[first];
            arr[first] = arr[second];
            arr[second] = temp;
        }
    }

    public static void main(String[] args) {
        int[] arr = {3, 8, 6, 7, 5, 9, 10};
        sortArray(arr);
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}
Q2. Segregate Positive and Negative Integers
This can be done using the partition process of QuickSort.


public class SegregatePosNeg {
    public static void segregate(int[] arr) {
        int n = arr.length;
        int j = 0;

        for (int i = 0; i < n; i++) {
            if (arr[i] < 0) {
                // Swap arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
                j++;
            }
        }
    }

    public static void main(String[] args) {
        int[] arr = {19, -20, 7, -4, -13, 11, -5, 3};
        segregate(arr);
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}
Q3. Segregate Positive and Negative Integers with Order Preservation
This can be done using an auxiliary array to maintain the order.


import java.util.ArrayList;

public class SegregatePosNegWithOrder {
    public static void segregate(int[] arr) {
        int n = arr.length;
        ArrayList<Integer> negatives = new ArrayList<>();
        ArrayList<Integer> positives = new ArrayList<>();

        for (int num : arr) {
            if (num < 0) {
                negatives.add(num);
            } else {
                positives.add(num);
            }
        }

        int index = 0;
        for (int num : negatives) {
            arr[index++] = num;
        }
        for (int num : positives) {
            arr[index++] = num;
        }
    }

    public static void main(String[] args) {
        int[] arr = {19, -20, 7, -4, -13, 11, -5, 3};
        segregate(arr);
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}
Q4. Permute Arrays to Meet Condition
Sort one array in ascending order and the other in descending order to maximize the chances of meeting the condition.

import java.util.Arrays;
import java.util.Collections;

public class PermuteArrays {
    public static String canPermute(int[] a, int[] b, int k) {
        Arrays.sort(a);
        Integer[] bInteger = Arrays.stream(b).boxed().toArray(Integer[]::new);
        Arrays.sort(bInteger, Collections.reverseOrder());

        for (int i = 0; i < a.length; i++) {
            if (a[i] + bInteger[i] < k) {
                return "No";
            }
        }
        return "Yes";
    }

    public static void main(String[] args) {
        int[] a1 = {2, 1, 3};
        int[] b1 = {7, 8, 9};
        int k1 = 10;
        System.out.println(canPermute(a1, b1, k1));

        int[] a2 = {1, 2, 2, 1};
        int[] b2 = {3, 3, 3, 4};
        int k2 = 5;
        System.out.println(canPermute(a2, b2, k2));
    }
}
Q5. Check if Intervals Intersect
Sort the intervals by start time and check for any overlapping intervals.


import java.util.Arrays;
import java.util.Comparator;

public class CheckIntervalsOverlap {
    public static boolean doIntervalsOverlap(int[][] intervals) {
        Arrays.sort(intervals, Comparator.comparingInt(a -> a[0]));

        for (int i = 0; i < intervals.length - 1; i++) {
            if (intervals[i][1] > intervals[i + 1][0]) {
                return true;
            }
        }
        return false;
    }

    public static void main(String[] args) {
        int[][] intervals1 = {{1, 3}, {5, 7}, {2, 4}, {6, 8}};
        System.out.println(doIntervalsOverlap(intervals1)); // Yes

        int[][] intervals2 = {{1, 3}, {7, 9}, {4, 6}, {10, 13}};
        System.out.println(doIntervalsOverlap(intervals2)); // No
    }
}